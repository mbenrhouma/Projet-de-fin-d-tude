package com.cynapsys.entities;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.SequenceGenerator;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlRootElement;

/**
 *
 * @author UC057
 */
@Entity
@SequenceGenerator(name="SEQ_CONTRAT",sequenceName="S_CONTRAT")
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "Contrat.findAll", query = "SELECT c FROM Contrat c"),
    @NamedQuery(name = "Contrat.findById", query = "SELECT c FROM Contrat c WHERE c.id = :id"),
    @NamedQuery(name = "Contrat.findByDateDebut", query = "SELECT c FROM Contrat c WHERE c.dateDebut = :dateDebut"),
    @NamedQuery(name = "Contrat.findByDateFin", query = "SELECT c FROM Contrat c WHERE c.dateFin = :dateFin"),
    @NamedQuery(name = "Contrat.findByDuree", query = "SELECT c FROM Contrat c WHERE c.duree = :duree"),
    @NamedQuery(name = "Contrat.findByEtatContrat", query = "SELECT c FROM Contrat c WHERE c.etatContrat = :etatContrat"),
    @NamedQuery(name = "Contrat.findByDateEnregistrement", query = "SELECT c FROM Contrat c WHERE c.dateEnregistrement = :dateEnregistrement")})
public class Contrat implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO,generator="SEQ_CONTRAT")
    @Basic(optional = false)
    @NotNull
    @Column(nullable = false)
    private Integer id;
    @Basic(optional = false)
    @NotNull
    @Column(name = "DATE_DEBUT", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date dateDebut;
    @Basic(optional = false)
    @NotNull
    @Column(name = "DATE_FIN", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date dateFin;
    @Basic(optional = false)
    @NotNull
    @Column(nullable = false)
    private short duree;
    @Basic(optional = false)
    @NotNull
    @Column(name = "ETAT_CONTRAT", nullable = false)
    private short etatContrat;
    @Column(name = "DATE_ENREGISTREMENT")
    @Temporal(TemporalType.TIMESTAMP)
    private Date dateEnregistrement;
    @JoinColumn(name = "CODE_ACQUEREUR", referencedColumnName = "CODE_ACQUEREUR", nullable = false)
    @ManyToOne(optional = false)
    private ClientAcquereur clientAcquereur;

    public Contrat() {
    }

    public Contrat(Integer id) {
        this.id = id;
    }

    public Contrat(Integer id, Date dateDebut, Date dateFin, short duree, short etatContrat) {
        this.id = id;
        this.dateDebut = dateDebut;
        this.dateFin = dateFin;
        this.duree = duree;
        this.etatContrat = etatContrat;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Date getDateDebut() {
        return dateDebut;
    }

    public void setDateDebut(Date dateDebut) {
        this.dateDebut = dateDebut;
    }

    public Date getDateFin() {
        return dateFin;
    }

    public void setDateFin(Date dateFin) {
        this.dateFin = dateFin;
    }

    public short getDuree() {
        return duree;
    }

    public void setDuree(short duree) {
        this.duree = duree;
    }

    public short getEtatContrat() {
        return etatContrat;
    }

    public void setEtatContrat(short etatContrat) {
        this.etatContrat = etatContrat;
    }

    public Date getDateEnregistrement() {
        return dateEnregistrement;
    }

    public void setDateEnregistrement(Date dateEnregistrement) {
        this.dateEnregistrement = dateEnregistrement;
    }

    public ClientAcquereur getClientAcquereur() {
        return clientAcquereur;
    }

    public void setClientAcquereur(ClientAcquereur clientAcquereur) {
        this.clientAcquereur = clientAcquereur;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Contrat)) {
            return false;
        }
        Contrat other = (Contrat) object;
        if ((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "entity.Contrat[ id=" + id + " ]";
    }
    
}
