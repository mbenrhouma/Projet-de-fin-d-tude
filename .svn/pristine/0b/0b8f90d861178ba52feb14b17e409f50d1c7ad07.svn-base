package com.cynapsys.entities;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

/**
 *
 * @author UC057
 */
@Entity
@Table(name = "CLIENT_LOCATAIRE")
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "ClientLocataire.findAll", query = "SELECT c FROM ClientLocataire c"),
    @NamedQuery(name = "ClientLocataire.findByCodeLocataire", query = "SELECT c FROM ClientLocataire c WHERE c.codeLocataire = :codeLocataire"),
    @NamedQuery(name = "ClientLocataire.findByCin", query = "SELECT c FROM ClientLocataire c WHERE c.cin = :cin"),
    @NamedQuery(name = "ClientLocataire.findByNomPrenom", query = "SELECT c FROM ClientLocataire c WHERE c.nomPrenom = :nomPrenom"),
    @NamedQuery(name = "ClientLocataire.findByRaisonSociale", query = "SELECT c FROM ClientLocataire c WHERE c.raisonSociale = :raisonSociale"),
    @NamedQuery(name = "ClientLocataire.findByAdresseLogement", query = "SELECT c FROM ClientLocataire c WHERE c.adresseLogement = :adresseLogement"),
    @NamedQuery(name = "ClientLocataire.findByAdresseCorrespondance", query = "SELECT c FROM ClientLocataire c WHERE c.adresseCorrespondance = :adresseCorrespondance"),
    @NamedQuery(name = "ClientLocataire.findBySoldeLoyer", query = "SELECT c FROM ClientLocataire c WHERE c.soldeLoyer = :soldeLoyer"),
    @NamedQuery(name = "ClientLocataire.findByCodeMaj", query = "SELECT c FROM ClientLocataire c WHERE c.codeMaj = :codeMaj")})
public class ClientLocataire implements Serializable {
    private static final long serialVersionUID = 1L;
    // @Max(value=?)  @Min(value=?)//if you know range of your decimal fields consider using these annotations to enforce field validation
    @Id
    @Basic(optional = false)
    @NotNull
    @Column(name = "CODE_LOCATAIRE", nullable = false, precision = 22, scale = 0)
    private BigDecimal codeLocataire;
    private Integer cin;
    @Size(max = 254)
    @Column(name = "NOM_PRENOM", length = 254)
    private String nomPrenom;
    @Size(max = 254)
    @Column(name = "RAISON_SOCIALE", length = 254)
    private String raisonSociale;
    @Size(max = 254)
    @Column(name = "ADRESSE_LOGEMENT", length = 254)
    private String adresseLogement;
    @Size(max = 254)
    @Column(name = "ADRESSE_CORRESPONDANCE", length = 254)
    private String adresseCorrespondance;
    @Column(name = "SOLDE_LOYER")
    private BigInteger soldeLoyer;
    @Size(max = 254)
    @Column(name = "CODE_MAJ", length = 254)
    private String codeMaj;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "clientLocataire")
    private List<ContratLocataire> contratLocataireList;
    @JoinColumn(name = "ID", referencedColumnName = "ID")
    @ManyToOne
    private ContratLocataire contratLocataire;
    @JoinColumn(name = "CODE", referencedColumnName = "CODE", nullable = false)
    @ManyToOne(optional = false)
    private Groupe groupe;
    @JoinColumn(name = "CODELOGEMENT", referencedColumnName = "CODELOGEMENT")
    @ManyToOne
    private Logement logement;

    public ClientLocataire() {
    }

    public ClientLocataire(BigDecimal codeLocataire) {
        this.codeLocataire = codeLocataire;
    }

    public BigDecimal getCodeLocataire() {
        return codeLocataire;
    }

    public void setCodeLocataire(BigDecimal codeLocataire) {
        this.codeLocataire = codeLocataire;
    }

    public Integer getCin() {
        return cin;
    }

    public void setCin(Integer cin) {
        this.cin = cin;
    }

    public String getNomPrenom() {
        return nomPrenom;
    }

    public void setNomPrenom(String nomPrenom) {
        this.nomPrenom = nomPrenom;
    }

    public String getRaisonSociale() {
        return raisonSociale;
    }

    public void setRaisonSociale(String raisonSociale) {
        this.raisonSociale = raisonSociale;
    }

    public String getAdresseLogement() {
        return adresseLogement;
    }

    public void setAdresseLogement(String adresseLogement) {
        this.adresseLogement = adresseLogement;
    }

    public String getAdresseCorrespondance() {
        return adresseCorrespondance;
    }

    public void setAdresseCorrespondance(String adresseCorrespondance) {
        this.adresseCorrespondance = adresseCorrespondance;
    }

    public BigInteger getSoldeLoyer() {
        return soldeLoyer;
    }

    public void setSoldeLoyer(BigInteger soldeLoyer) {
        this.soldeLoyer = soldeLoyer;
    }

    public String getCodeMaj() {
        return codeMaj;
    }

    public void setCodeMaj(String codeMaj) {
        this.codeMaj = codeMaj;
    }

    @XmlTransient
    public List<ContratLocataire> getContratLocataireList() {
        return contratLocataireList;
    }

    public void setContratLocataireList(List<ContratLocataire> contratLocataireList) {
        this.contratLocataireList = contratLocataireList;
    }

    public ContratLocataire getContratLocataire() {
        return contratLocataire;
    }

    public void setContratLocataire(ContratLocataire contratLocataire) {
        this.contratLocataire = contratLocataire;
    }

    public Groupe getGroupe() {
        return groupe;
    }

    public void setGroupe(Groupe groupe) {
        this.groupe = groupe;
    }

    public Logement getLogement() {
        return logement;
    }

    public void setLogement(Logement logement) {
        this.logement = logement;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (codeLocataire != null ? codeLocataire.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof ClientLocataire)) {
            return false;
        }
        ClientLocataire other = (ClientLocataire) object;
        if ((this.codeLocataire == null && other.codeLocataire != null) || (this.codeLocataire != null && !this.codeLocataire.equals(other.codeLocataire))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "entity.ClientLocataire[ codeLocataire=" + codeLocataire + " ]";
    }
    
}
