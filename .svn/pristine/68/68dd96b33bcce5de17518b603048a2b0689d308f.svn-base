package com.cynapsys.Views;

import java.io.Serializable;
import java.util.ArrayList;

import java.util.List;
import java.util.ResourceBundle;

import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpSession;

import org.springframework.dao.DuplicateKeyException;

import com.cynapsys.entities.ClientAcquereur;
import com.cynapsys.entities.CodePostal;
import com.cynapsys.entities.Gouvernorat;
import com.cynapsys.entities.Localite;
import com.cynapsys.entities.Logement;
import com.cynapsys.entities.TypeLogement;
import com.cynapsys.service.ClientAcquereurService;
import com.cynapsys.service.CodePostalService;
import com.cynapsys.service.GouvernoratService;
import com.cynapsys.service.LocaliteService;
import com.cynapsys.service.LogementService;
import com.cynapsys.service.TypeLogementService;
import com.cynapsys.utils.Constants;
import com.cynapsys.utils.JsfUtil;

@ManagedBean(name = "logementBean")
@ViewScoped
public class LogementBean implements Serializable {
	@ManagedProperty(value = "#{logementService}")
	private LogementService logementService;
	@ManagedProperty(value = "#{clientAcquereurService}")
	private ClientAcquereurService clientAcquereurService;
	@ManagedProperty(value = "#{gouvernoratService}")
	private GouvernoratService gouvernoratService;
	@ManagedProperty(value = "#{localiteService}")
	private LocaliteService localiteService;
	@ManagedProperty(value = "#{typeLogementService}")
	private TypeLogementService typeLogementService;
	@ManagedProperty(value = "#{codePostalService}")
	private CodePostalService codePostalService;
	
	
	
	
	private static final long serialVersionUID = 1L;
	private Logement newLogement;
	private Logement selectLogement;
	private int modif = 0; // Modification 0 : insertion 1;
	private List<Logement> LogementFilter;
	private List<Logement> listLogement;
	private boolean enabledBoutonDelete;
	public HttpSession session;
	private int ModifLogement = 1;
	private List<ClientAcquereur> listClientAcquereur;
	private List<Gouvernorat> listGouvernerat;
	private List<Localite> listLocalite;
	private List<TypeLogement> listTypeLogement;
	private List <CodePostal> listCodePostal;

	public LogementBean() {
		FacesContext context = FacesContext.getCurrentInstance();
		ExternalContext extContext = context.getExternalContext();
		session = (HttpSession) extContext.getSession(false);

	}

	@PostConstruct
	public void initialisation() {

		newLogement = new Logement();

		listLogement = new ArrayList<Logement>();
		listLogement = logementService.finAllJoin();
		listClientAcquereur=new ArrayList<ClientAcquereur>();
		listClientAcquereur=clientAcquereurService.findDTA();
		listGouvernerat=new ArrayList<Gouvernorat>();
		listGouvernerat=gouvernoratService.findAll();
		listLocalite=new ArrayList<Localite>();
		listLocalite=localiteService.findAll();
		listTypeLogement=new ArrayList<TypeLogement>();
		listTypeLogement=typeLogementService.findAll();
		LogementFilter = new ArrayList<Logement>();
		listCodePostal=new ArrayList<CodePostal>();
		listCodePostal=codePostalService.findAll();

	}

	public void createLogement() {
		newLogement = new Logement();
		ModifLogement = 1;
		selectLogement = null;
		listLogement = new ArrayList<Logement>();
		listLogement = logementService.finAllJoin();
		modif = 0;
	}

	public void onselectLogement() {
		newLogement = selectLogement;
		ModifLogement = 0;
		modif = 1;
		listLogement = new ArrayList<Logement>();
		listLogement = logementService.finAllJoin();
	}

	public void saveLogement() {
		if (ModifLogement == 1) {
			try {
				logementService.save(newLogement);
				if (session.getAttribute("locale").toString().equals("fr"))
					JsfUtil.addSuccessMessage(ResourceBundle.getBundle(Constants.bundle_logement_fr)
							.getString("logement.cree.succes"));
				else {
					JsfUtil.addSuccessMessage(ResourceBundle.getBundle(Constants.bundle_logement_fr)
							.getString("logement.cree.succes"));
				}
				createLogement();
			} catch (DuplicateKeyException e) {

				if (session.getAttribute("locale").toString().equals("fr"))
					JsfUtil.addErrorMessage(ResourceBundle.getBundle(Constants.bundle_logement_fr)
							.getString("logement.error.existe"));
				else
					JsfUtil.addErrorMessage(ResourceBundle.getBundle(Constants.bundle_logement_fr)
							.getString("logement.error.existe"));

				newLogement.setCodeLogement(null);
			}
		} else if (ModifLogement == 0) {
			logementService.update(newLogement);
			if (session.getAttribute("locale").toString().equals("fr"))
				JsfUtil.addSuccessMessage(ResourceBundle.getBundle(Constants.bundle_logement_fr)
						.getString("logement.modifie.succes"));
			else
				JsfUtil.addSuccessMessage(ResourceBundle.getBundle(Constants.bundle_logement_fr)
						.getString("logement.modifie.succes"));

			createLogement();
		}

	}

	public void deleteLogement() {
		try {
			logementService.delete(newLogement);
			if (session.getAttribute("locale").toString().equals("fr"))
				JsfUtil.addSuccessMessage(ResourceBundle.getBundle(Constants.bundle_logement_fr)
						.getString("logement.supprime.succes"));
			else {
				JsfUtil.addSuccessMessage(ResourceBundle.getBundle(Constants.bundle_logement_fr)
						.getString("logement.supprime.succes"));
			}

		} catch (Exception e) {
			if (session.getAttribute("locale").toString().equals("fr"))
				JsfUtil.addErrorMessage(ResourceBundle.getBundle(Constants.bundle_logement_fr)
						.getString("logement.error.supprimer"));
			else
				JsfUtil.addErrorMessage(ResourceBundle.getBundle(Constants.bundle_logement_fr)
						.getString("logement.error.supprimer"));
		}
		createLogement();
	}

	public LogementService getLogementService() {
		return logementService;
	}

	public void setLogementService(LogementService LogementService) {
		this.logementService = LogementService;
	}

	public Logement getNewLogement() {
		return newLogement;
	}

	public void setNewLogement(Logement newLogement) {
		this.newLogement = newLogement;
	}

	public Logement getSelectLogement() {
		return selectLogement;
	}

	public void setSelectLogement(Logement selectLogement) {
		this.selectLogement = selectLogement;
	}

	public int getModif() {
		return modif;
	}

	public void setModif(int modif) {
		this.modif = modif;
	}

	public List<Logement> getLogementFilter() {
		return LogementFilter;
	}

	public void setLogementFilter(List<Logement> LogementFilter) {
		this.LogementFilter = LogementFilter;
	}

	public List<Logement> getListLogement() {
		return listLogement;
	}

	public void setListLogement(List<Logement> listLogement) {
		this.listLogement = listLogement;
	}

	public boolean isEnabledBoutonDelete() {
		return enabledBoutonDelete;
	}

	public void setEnabledBoutonDelete(boolean enabledBoutonDelete) {
		this.enabledBoutonDelete = enabledBoutonDelete;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	public HttpSession getSession() {
		return session;
	}

	public void setSession(HttpSession session) {
		this.session = session;
	}

	public int getModifLogement() {
		return ModifLogement;
	}

	public void setModifLogement(int modifLogement) {
		ModifLogement = modifLogement;
	}

	public ClientAcquereurService getClientAcquereurService() {
		return clientAcquereurService;
	}

	public void setClientAcquereurService(ClientAcquereurService clientAcquereurService) {
		this.clientAcquereurService = clientAcquereurService;
	}

	public List<ClientAcquereur> getListClientAcquereur() {
		return listClientAcquereur;
	}

	public void setListClientAcquereur(List<ClientAcquereur> listClientAcquereur) {
		this.listClientAcquereur = listClientAcquereur;
	}

	public GouvernoratService getGouvernoratService() {
		return gouvernoratService;
	}

	public void setGouvernoratService(GouvernoratService gouvernoratService) {
		this.gouvernoratService = gouvernoratService;
	}

	public LocaliteService getLocaliteService() {
		return localiteService;
	}

	public void setLocaliteService(LocaliteService localiteService) {
		this.localiteService = localiteService;
	}

	public TypeLogementService getTypeLogementService() {
		return typeLogementService;
	}

	public void setTypeLogementService(TypeLogementService typeLogementService) {
		this.typeLogementService = typeLogementService;
	}

	public List<Gouvernorat> getListGouvernerat() {
		return listGouvernerat;
	}

	public void setListGouvernerat(List<Gouvernorat> listGouvernerat) {
		this.listGouvernerat = listGouvernerat;
	}

	public List<Localite> getListLocalite() {
		return listLocalite;
	}

	public void setListLocalite(List<Localite> listLocalite) {
		this.listLocalite = listLocalite;
	}

	public List<TypeLogement> getListTypeLogement() {
		return listTypeLogement;
	}

	public void setListTypeLogement(List<TypeLogement> listTypeLogement) {
		this.listTypeLogement = listTypeLogement;
	}

	public CodePostalService getCodePostalService() {
		return codePostalService;
	}

	public void setCodePostalService(CodePostalService codePostalService) {
		this.codePostalService = codePostalService;
	}

	public List<CodePostal> getListCodePostal() {
		return listCodePostal;
	}

	public void setListCodePostal(List<CodePostal> listCodePostal) {
		this.listCodePostal = listCodePostal;
	}
	
	

}
