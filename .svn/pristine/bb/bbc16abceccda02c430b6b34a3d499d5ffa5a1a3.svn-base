package com.cynapsys.entities;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

/**
 *
 * @author UC057
 */
@Entity
@Table(name = "TYPE_RECLAMATION")
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "TypeReclamation.findAll", query = "SELECT t FROM TypeReclamation t"),
    @NamedQuery(name = "TypeReclamation.findByCode", query = "SELECT t FROM TypeReclamation t WHERE t.code = :code"),
    @NamedQuery(name = "TypeReclamation.findByObjetReclamation", query = "SELECT t FROM TypeReclamation t WHERE t.objetReclamation = :objetReclamation")})
public class TypeReclamation implements Serializable {
    private static final long serialVersionUID = 1L;
    // @Max(value=?)  @Min(value=?)//if you know range of your decimal fields consider using these annotations to enforce field validation
    @Id
    @Basic(optional = false)
    @NotNull
    @Column(nullable = false, precision = 22, scale = 0)
    private BigDecimal code;
    @Size(max = 254)
    @Column(name = "OBJET_RECLAMATION", length = 254)
    private String objetReclamation;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "typeReclamation")
    private List<Reclamation> reclamationList;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "typeReclamation1")
    private List<Reclamation> reclamationList1;

    public TypeReclamation() {
    }

    public TypeReclamation(BigDecimal code) {
        this.code = code;
    }

    public BigDecimal getCode() {
        return code;
    }

    public void setCode(BigDecimal code) {
        this.code = code;
    }

    public String getObjetReclamation() {
        return objetReclamation;
    }

    public void setObjetReclamation(String objetReclamation) {
        this.objetReclamation = objetReclamation;
    }

    @XmlTransient
    public List<Reclamation> getReclamationList() {
        return reclamationList;
    }

    public void setReclamationList(List<Reclamation> reclamationList) {
        this.reclamationList = reclamationList;
    }

    @XmlTransient
    public List<Reclamation> getReclamationList1() {
        return reclamationList1;
    }

    public void setReclamationList1(List<Reclamation> reclamationList1) {
        this.reclamationList1 = reclamationList1;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (code != null ? code.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof TypeReclamation)) {
            return false;
        }
        TypeReclamation other = (TypeReclamation) object;
        if ((this.code == null && other.code != null) || (this.code != null && !this.code.equals(other.code))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "entity.TypeReclamation[ code=" + code + " ]";
    }
    
}
