package com.cynapsys.Views;

import java.io.Serializable;
import java.util.ArrayList;

import java.util.List;
import java.util.ResourceBundle;

import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpSession;

import org.springframework.dao.DuplicateKeyException;

import com.cynapsys.entities.Gouvernorat;
import com.cynapsys.entities.Localite;
import com.cynapsys.service.GouvernoratService;
import com.cynapsys.service.LocaliteService;
import com.cynapsys.utils.Constants;
import com.cynapsys.utils.JsfUtil;

@ManagedBean(name = "localiteBean")
@ViewScoped
public class LocaliteBean implements Serializable {
	@ManagedProperty(value = "#{localiteService}")
	private LocaliteService localiteService;
	@ManagedProperty(value = "#{gouvernoratService}")
	private GouvernoratService gouvernoratService;

	private static final long serialVersionUID = 1L;
	private Localite newLocalite;
	private Localite selectLocalite;
	private int modif = 0; // Modification 0 : insertion 1;
	private List<Localite> LocaliteFilter;
	private List<Localite> listLocalite;
	private List<Gouvernorat> listGouvernorat;
	private boolean enabledBoutonDelete;
	public HttpSession session;
	private int ModifLocalite = 1;

	public LocaliteBean() {
		FacesContext context = FacesContext.getCurrentInstance();
		ExternalContext extContext = context.getExternalContext();
		session = (HttpSession) extContext.getSession(false);

	}

	@PostConstruct
	public void initialisation() {

		newLocalite = new Localite();

		listLocalite = new ArrayList<Localite>();
		listLocalite = localiteService.finddta();
		listGouvernorat=new ArrayList<Gouvernorat>();
		listGouvernorat=gouvernoratService.findAll();
		LocaliteFilter = new ArrayList<Localite>();

	}

	public GouvernoratService getGouvernoratService() {
		return gouvernoratService;
	}

	public void setGouvernoratService(GouvernoratService gouvernoratService) {
		this.gouvernoratService = gouvernoratService;
	}

	public List<Gouvernorat> getListGouvernorat() {
		return listGouvernorat;
	}

	public void setListGouvernorat(List<Gouvernorat> listGouvernorat) {
		this.listGouvernorat = listGouvernorat;
	}

	public void createLocalite() {
		newLocalite = new Localite();
		ModifLocalite = 1;
		selectLocalite = null;
		listLocalite = localiteService.finddta();
		modif = 0;
	}

	public void onselectLocalite() {
		newLocalite = selectLocalite;
		ModifLocalite = 0;
		modif = 1;
		listLocalite = localiteService.finddta();
	}

	public void saveLocalite() {
		if (ModifLocalite == 1) {
			try {
				localiteService.save(newLocalite);
				if (session.getAttribute("locale").toString().equals("fr"))
					JsfUtil.addSuccessMessage(ResourceBundle.getBundle(Constants.bundle_parametrage_fr)
							.getString("parametrage.localite.cree.succes"));
				else {
					JsfUtil.addSuccessMessage(ResourceBundle.getBundle(Constants.bundle_parametrage_ar)
							.getString("parametrage.localite.cree.succes"));
				}
				createLocalite();
			} catch (DuplicateKeyException e) {

				if (session.getAttribute("locale").toString().equals("fr"))
					JsfUtil.addErrorMessage(ResourceBundle.getBundle(Constants.bundle_parametrage_fr)
							.getString("parametrage.localite.error.existe"));
				else
					JsfUtil.addErrorMessage(ResourceBundle.getBundle(Constants.bundle_parametrage_ar)
							.getString("parametrage.localite.error.existe"));

				newLocalite.setCode("");
			}
		} else if (ModifLocalite == 0) {
			localiteService.update(newLocalite);
			if (session.getAttribute("locale").toString().equals("fr"))
				JsfUtil.addSuccessMessage(ResourceBundle.getBundle(Constants.bundle_parametrage_fr)
						.getString("parametrage.localite.modifie.succes"));
			else
				JsfUtil.addSuccessMessage(ResourceBundle.getBundle(Constants.bundle_parametrage_ar)
						.getString("parametrage.localite.modifie.succes"));

			createLocalite();
		}

	}

	public void deleteLocalite() {
		try {
			localiteService.delete(newLocalite);
			if (session.getAttribute("locale").toString().equals("fr"))
				JsfUtil.addSuccessMessage(ResourceBundle.getBundle(Constants.bundle_parametrage_fr)
						.getString("parametrage.localite.supprime.succes"));
			else {
				JsfUtil.addSuccessMessage(ResourceBundle.getBundle(Constants.bundle_parametrage_ar)
						.getString("parametrage.localite.supprime.succes"));
			}

		} catch (Exception e) {
			if (session.getAttribute("locale").toString().equals("fr"))
				JsfUtil.addErrorMessage(ResourceBundle.getBundle(Constants.bundle_parametrage_fr)
						.getString("parametrage.localite.error.supprimerr"));
			else
				JsfUtil.addErrorMessage(ResourceBundle.getBundle(Constants.bundle_parametrage_ar)
						.getString("parametrage.localite.error.supprimer"));
		}
		createLocalite();
	}

	public LocaliteService getLocaliteService() {
		return localiteService;
	}

	public void setLocaliteService(LocaliteService LocaliteService) {
		this.localiteService = LocaliteService;
	}

	public Localite getNewLocalite() {
		return newLocalite;
	}

	public void setNewLocalite(Localite newLocalite) {
		this.newLocalite = newLocalite;
	}

	public Localite getSelectLocalite() {
		return selectLocalite;
	}

	public void setSelectLocalite(Localite selectLocalite) {
		this.selectLocalite = selectLocalite;
	}

	public int getModif() {
		return modif;
	}

	public void setModif(int modif) {
		this.modif = modif;
	}

	public List<Localite> getLocaliteFilter() {
		return LocaliteFilter;
	}

	public void setLocaliteFilter(List<Localite> LocaliteFilter) {
		this.LocaliteFilter = LocaliteFilter;
	}

	public List<Localite> getListLocalite() {
		return listLocalite;
	}

	public void setListLocalite(List<Localite> listLocalite) {
		this.listLocalite = listLocalite;
	}

	public boolean isEnabledBoutonDelete() {
		return enabledBoutonDelete;
	}

	public void setEnabledBoutonDelete(boolean enabledBoutonDelete) {
		this.enabledBoutonDelete = enabledBoutonDelete;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	public HttpSession getSession() {
		return session;
	}

	public void setSession(HttpSession session) {
		this.session = session;
	}

	public int getModifLocalite() {
		return ModifLocalite;
	}

	public void setModifLocalite(int modifLocalite) {
		ModifLocalite = modifLocalite;
	}

}
