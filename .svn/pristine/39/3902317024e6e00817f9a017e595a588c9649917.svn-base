package com.cynapsys.dao.impl;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.transform.Transformers;
import org.springframework.stereotype.Repository;

import com.cynapsys.dao.ClientAcquereurDAO;
import com.cynapsys.entities.ClientAcquereur;
import com.cynapsys.entities.NoteDebit;

@SuppressWarnings("serial")
@Repository("clientAcquereurDAO")
public class ClientAcquereurDAOImpl extends AbstractDAOImpl<ClientAcquereur>
		implements ClientAcquereurDAO, Serializable {

	public ClientAcquereurDAOImpl() {
		super(ClientAcquereur.class);
	}

	@Override
	public ClientAcquereur findById(String id) {

		List<ClientAcquereur> list = new ArrayList<ClientAcquereur>();
		try {
			Criteria criteria = getSession().createCriteria(ClientAcquereur.class);
			criteria.add(Restrictions.eq("codeAcquereur", new BigDecimal(id)));
			list = criteria.list();

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		if (list != null && !list.isEmpty())
			return list.get(0);
		else
			return null;
		

//		List<ClientAcquereur> list = new ArrayList<ClientAcquereur>();
//		StringBuilder req = new StringBuilder();
//		req.append(
//				"from ClientAcquereur I left join fetch I.groupe where I.id = '").append(id)
//		.append("'");
//		list = (List<ClientAcquereur>) this.getHibernateTemplate().find(req.toString());
//
//		return list.get(0);
//		
	}


	@Override
	public List<ClientAcquereur> rechercheClientAcquereur(ClientAcquereur clientAcquereur) {

		try {
		
			Criteria criteria = getSession().createCriteria(ClientAcquereur.class);

			
			// clause select
//			if(clientAcquereur.getAssureur()!=null && clientAcquereur.getAssureur().getCodeassureur()!=null){
//				criteria.add(Restrictions.eq("assureur.codeassureur", clientAcquereur.getAssureur().getCodeassureur()));
//			}
			if(clientAcquereur.getGroupe()!=null && clientAcquereur.getGroupe().getCode()!=null){
				criteria.add(Restrictions.eq("groupe.code", clientAcquereur.getGroupe().getCode()));
			}
			if(clientAcquereur.getNomPrenomFr()!=null && !"".equals(clientAcquereur.getNomPrenomFr())){
				criteria.add(Restrictions.like("nomPrenomFr", "%"+clientAcquereur.getNomPrenomFr()+"%"));
			}
			if(clientAcquereur.getAdresseCorrespondance()!=null && !"".equals(clientAcquereur.getAdresseCorrespondance())){
				criteria.add(Restrictions.like("adresseCorrespondance", "%"+clientAcquereur.getAdresseCorrespondance()+"%"));
			}
//			if(clientAcquereur.getAnneebudgetaire()!=null){
//				criteria.add(Restrictions.eq("anneebudgetaire", clientAcquereur.getAnneebudgetaire()));
//			}
			
			return criteria.list();
		} catch (Exception e) {

			e.printStackTrace();
			return new ArrayList<ClientAcquereur>();
		}
	}

	@Override
	public List<ClientAcquereur> findAllDta() {
		try {
			Criteria criteria = getSession().createCriteria(ClientAcquereur.class);
			// clause select
			criteria.setProjection(
					Projections.projectionList()
							.add(Projections.alias(Projections.property("codeAcquereur"), "codeAcquereur"))
							.add(Projections.alias(Projections.property("nomPrenomFr"), "nomPrenomFr"))
							.add(Projections.alias(Projections.property("nomPrenomAr"), "nomPrenomAr"))
							.add(Projections.alias(Projections.property("compteConjoint"), "compteConjoint"))
							.add(Projections.alias(Projections.property("nomprenomconjointar"), "nomprenomconjointar"))
							.add(Projections.alias(Projections.property("dateNaissance"), "dateNaissance"))
							.add(Projections.alias(Projections.property("adresseCorrespondance"),
									"adresseCorrespondance"))
							.add(Projections.alias(Projections.property("anneebudgetaire"), "anneebudgetaire"))
							.add(Projections.alias(Projections.property("groupe"), "groupe"))
							.add(Projections.alias(Projections.property("employeur"), "employeur"))
							.add(Projections.alias(Projections.property("assureur"), "assureur"))
							.add(Projections.alias(Projections.property("assurance1"), "assurance1")).add(Projections
									.alias(Projections.property("nomPrenomConjointFr"), "nomPrenomConjointFr")));

			// Set to result transformer
			criteria.setResultTransformer(Transformers.aliasToBean(ClientAcquereur.class));

			List<ClientAcquereur> list = criteria.list();
			// ArrayList<ClientAcquereur> locatairesActifs=new
			// ArrayList<ClientAcquereur>();
			// for(Locataire l:list){
			// if(l.isEtat()){
			// locatairesActifs.add(l);
			// }
			// }
			return list;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return new ArrayList<ClientAcquereur>();
		}
	}

	@Override
	public List<ClientAcquereur> findDTA() {
			List<ClientAcquereur> list = new ArrayList<ClientAcquereur>();
			StringBuilder req = new StringBuilder();
			req.append("from ClientAcquereur I  "
				
					+ " left join fetch I.groupe");
			list = (List<ClientAcquereur>) this.getHibernateTemplate().find(req.toString());

			if (list != null && !list.isEmpty())
				return  list;
			else
				return null;
		}

	@Override
	public List<ClientAcquereur> findByCriteres(ClientAcquereur clientAcquereur) {
		List<ClientAcquereur> list = new ArrayList<ClientAcquereur>();
		// System.out.println(arrangement.getPrecontentieu().getImpayee().getClientAcquereur().getCodeAcquereur());

		try {
			Criteria criteria = getSession().createCriteria(ClientAcquereur.class);
			// clause select

			// criteria.createAlias("clientAcquereur", "ca");
			// criteria.createAlias("ca.groupe", "caf");

			criteria.createAlias("employeur", "em");
			criteria.createAlias("groupe", "g");
			criteria.createAlias("assurance1", "assur");
			criteria.createAlias("assur.assureur", "assureur");
//			criteria.createAlias("p.impayee", "pi");
//			criteria.createAlias("pi.clientAcquereur", "pic");
//			criteria.createAlias("pic.groupe", "picg");

			 if(clientAcquereur.getCodeAcquereur()!=null){
			 criteria.add(Restrictions.eq("codeAcquereur",clientAcquereur.getCodeAcquereur()));
			 }
			 
			 if(clientAcquereur.getNomPrenomFr()!=null){
				 criteria.add(Restrictions.like("nomPrenomFr",clientAcquereur.getNomPrenomFr().toUpperCase(),MatchMode.START));
			}
			 if(clientAcquereur.getGroupe()!=null){
			 criteria.add(Restrictions.like("g.libelle",
					 clientAcquereur.getGroupe().getLibelle(),MatchMode.ANYWHERE));
			 }
			 
//			 if(clientAcquereur.getEmployeur()!=null){
//				 criteria.add(Restrictions.eq("em.codeEmployeur",clientAcquereur.getEmployeur().getCodeEmployeur()));
//				 }
//			 
			 if(clientAcquereur.getAssurance()!=null && clientAcquereur.getAssurance().getAssureur()!=null){
				 criteria.add(Restrictions.like("assureur.abreviation",
						 clientAcquereur.getAssurance().getAssureur().getAbreviation(),MatchMode.ANYWHERE));
				 }
			//
			//
			// if(dateD!=null && dateF!=null && dateF.compareTo(dateD)>0){
			// System.out.println("resultat date"+dateF.compareTo(dateD));
			// criteria.add(Restrictions.between("datedebut", dateD, dateF));
			// }
			//
			// if(dateD!=null && dateF==null){
			// criteria.add(Expression.ge("datedebut",dateD));
			// }
			//
			// if(dateD==null && dateF!=null){
			// criteria.add(Expression.le("datedebut",dateF));
			// }

			list = criteria.list();

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		System.out.println("recherche clientsAcq, taille de la liste : " + list.size());
		return list;
	}

}
