package com.cynapsys.dao.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;

import com.cynapsys.dao.LogementDAO;
import com.cynapsys.entities.Logement;
import com.cynapsys.entities.NoteDebit;

@SuppressWarnings("serial")
@Repository("logementDAO")
public class LogementDAOImpl extends AbstractDAOImpl<Logement>
		implements LogementDAO, Serializable {

	public LogementDAOImpl() {
		super(Logement.class);
	}

	@Override
	public Logement findById(String id) {
		List<Logement> list = new ArrayList<Logement>();
		StringBuilder req = new StringBuilder();
		req.append(
				"from Logement I "
				+ " left join fetch I.clientAcquereur k  "
				+ " left join fetch k.groupe "
				+ " left join fetch I.typeLogement"
				+ " left join fetch I.gouvernorat"
				+ " left join fetch I.codePostal"
				+ " left join fetch I.localite where I.codelogement==").append(Integer.parseInt(id));
		list = (List<Logement>) this.getHibernateTemplate().find(req.toString());

		if (list != null && !list.isEmpty()) {
			return list.get(0);
		} else {
			return null;

		}
		
	}

	@Override
	public List<Logement> finAllJoin() {
		List<Logement> list = new ArrayList<Logement>();
		StringBuilder req = new StringBuilder();
		req.append(
				"from Logement I "
				+ " left join fetch I.clientAcquereur k  " 
				+ " left join fetch k.groupe "
				+ " left join fetch I.typeLogement "
				+ " left join fetch I.gouvernorat"
				+ " left join fetch I.codePostal"
				+ " left join fetch I.localite");
		list = (List<Logement>) this.getHibernateTemplate().find(req.toString());

		if (list != null && !list.isEmpty()) {
			return list;
		} else {
			return null;

		}
	}

}
